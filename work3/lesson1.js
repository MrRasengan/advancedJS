// Задание 1
// Вы разрабатываете прототип веб-приложения для чтения новостей. Статьи "хранятся" во внутреннем массиве
// (имитируя базу данных). Когда пользователь нажимает на кнопку "Загрузить новости", ваш код должен
// имитировать задержку, словно происходит реальная загрузка данных из внешнего источника, а после этой
// задержки — отображать новости на странице.
// 1. Создайте базовую HTML-структуру с кнопкой для загрузки новостей и контейнером для их отображения.
// 2. Реализуйте функцию fetchNews(), возвращающую промис. Эта функция должна имитировать
// задержку в 2 секунды перед успешным возвращением данных из "виртуальной" базы данных. Для
// добавления интереса: с вероятностью 10% она должна возвращать ошибку вместо данных.
// 3. При нажатии на кнопку "Загрузить новости" вызывайте функцию fetchNews(), обрабатывая успешное
// выполнение и ошибки с использованием then() и catch().
// 4. При успешной загрузке отобразите статьи на странице. При ошибке покажите сообщение об ошибке.
// 5. Добавьте функционал, который отключает кнопку загрузки на время "загрузки" новостей и активирует
// её снова после завершения операции (будь то успешная загрузка или ошибка).


function fetchNews() {
  return new Promise((resolve, reject) => {
    // Имитируем задержку в 2 секунды
    setTimeout(() => {
      // Имитируем данные из "виртуальной" базы данных
      const news = [
        { title: 'Новость 1', content: 'Содержание новости 1' },
        { title: 'Новость 2', content: 'Содержание новости 2' },
        { title: 'Новость 3', content: 'Содержание новости 3' }
      ];

      // С вероятностью 10% возвращаем ошибку
      if (Math.random() < 0.1) {
        reject('Произошла ошибка при загрузке новостей.');
      } else {
        resolve(news);
      }
    }, 2000);
  });
}

const loadNewsButton = document.getElementById('loadNewsButton');
const newsContainer = document.getElementById('newsContainer');

loadNewsButton.addEventListener('click', () => {
  // Отключаем кнопку на время загрузки
  loadNewsButton.disabled = true;

  fetchNews()
    .then(news => {
      // Очищаем контейнер новостей
      newsContainer.innerHTML = '';

      // Отображаем новости
      news.forEach(article => {
        const articleElement = document.createElement('div');
        articleElement.innerHTML = `<h3>${article.title}</h3><p>${article.content}</p>`;
        newsContainer.appendChild(articleElement);
      });
    })
    .catch(error => {
      // Отображаем сообщение об ошибке
      newsContainer.innerHTML = `<p>${error}</p>`;
    })
    .finally(() => {
      // Активируем кнопку после завершения операции
      loadNewsButton.disabled = false;
    });
});
